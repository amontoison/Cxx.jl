using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libcxxffi"], :libcxxffi),
]

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("https://github.com/Gnimuc/CxxBuilder/releases/download/v0.0.0-1/libcxxffi.v0.0.0.x86_64-linux-gnu-gcc7.tar.gz", "8dc796c0577973d09270b79b50a57b547938426951f8830fbec5270d35ffde8e"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc7)) => ("https://github.com/Gnimuc/CxxBuilder/releases/download/v0.0.0-2/libcxxffi.v0.0.0.x86_64-apple-darwin14-gcc7.tar.gz", "812b78869a318299e33d69fba738514521a139621f5a85633fbcbfd0b58fae6e"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end
