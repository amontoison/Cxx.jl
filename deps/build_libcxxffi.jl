using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libcxxffi"], :libcxxffi),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/Gnimuc/CxxBuilder/releases/download/v0.0.1-1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libcxxffi.v0.0.0.i686-linux-gnu-gcc7.tar.gz", "e49e15d65f29ab843bed1ecfb76118a26dd6e02911da5047554eadf50bc6c4f2"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libcxxffi.v0.0.0.x86_64-linux-gnu-gcc7.tar.gz", "3a7e792ba981227a362eff81c561221822add2009557b796b73d62c88f8a9b04"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libcxxffi.v0.0.0.x86_64-apple-darwin14-gcc7.tar.gz", "277ae858567168db697438aba4623539b0aa67ad5112110a3745522bdd7be18b"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc7)) => ("https://github.com/Gnimuc/CxxBuilder/releases/download/v0.0.0-5/libcxxffi.v0.0.0.x86_64-w64-mingw32-gcc7.tar.gz", "1b3728e49540ed15cfecdb1c56583db51282b7d2a144dc43aef0d5df71ea278f"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
@static if Sys.iswindows()
     dl_info = download_info[Windows(Sys.WORD_SIZE == 64 ? :x86_64 : :i686, compiler_abi=CompilerABI(:gcc7))]
else
     dl_info = choose_download(download_info, platform_key_abi())
end
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    @static if Sys.iswindows()
        install(dl_info...; prefix=prefix, force=true, verbose=verbose, ignore_platform=true)
    else
        install(dl_info...; prefix=prefix, force=true, verbose=verbose)
    end
end
